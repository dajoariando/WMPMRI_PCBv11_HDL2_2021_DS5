#ifndef _ALTERA_HPS_SOC_SYSTEM_H_
#define _ALTERA_HPS_SOC_SYSTEM_H_

/*
 * This file was automatically generated by the swinfo2header utility.
 * 
 * Created from SOPC Builder system 'soc_system' in
 * file '../SoC/soc_system.sopcinfo'.
 */

/*
 * This file contains macros for module 'hps_0' and devices
 * connected to the following masters:
 *   h2f_axi_master
 *   h2f_lw_axi_master
 * 
 * Do not include this header file and another header file created for a
 * different module or master group at the same time.
 * Doing so may result in duplicate macro names.
 * Instead, use the system header file which has macros with unique names.
 */

/*
 * Macros for device 'tx_H1', class 'bstream_new'
 * The macros are prefixed with 'TX_H1_'.
 * The prefix is the slave descriptor.
 */
#define TX_H1_COMPONENT_TYPE bstream_new
#define TX_H1_COMPONENT_NAME tx_H1
#define TX_H1_BASE 0x0
#define TX_H1_SPAN 512
#define TX_H1_END 0x1ff

/*
 * Macros for device 'nco_phase_ph_overlap', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PH_OVERLAP_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PH_OVERLAP_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PH_OVERLAP_COMPONENT_NAME nco_phase_ph_overlap
#define NCO_PHASE_PH_OVERLAP_BASE 0x0
#define NCO_PHASE_PH_OVERLAP_SPAN 16
#define NCO_PHASE_PH_OVERLAP_END 0xf
#define NCO_PHASE_PH_OVERLAP_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PH_OVERLAP_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PH_OVERLAP_CAPTURE 0
#define NCO_PHASE_PH_OVERLAP_DATA_WIDTH 16
#define NCO_PHASE_PH_OVERLAP_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PH_OVERLAP_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PH_OVERLAP_EDGE_TYPE NONE
#define NCO_PHASE_PH_OVERLAP_FREQ 50000000
#define NCO_PHASE_PH_OVERLAP_HAS_IN 0
#define NCO_PHASE_PH_OVERLAP_HAS_OUT 1
#define NCO_PHASE_PH_OVERLAP_HAS_TRI 0
#define NCO_PHASE_PH_OVERLAP_IRQ_TYPE NONE
#define NCO_PHASE_PH_OVERLAP_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_ph_inc', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PH_INC_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PH_INC_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PH_INC_COMPONENT_NAME nco_phase_ph_inc
#define NCO_PHASE_PH_INC_BASE 0x10
#define NCO_PHASE_PH_INC_SPAN 16
#define NCO_PHASE_PH_INC_END 0x1f
#define NCO_PHASE_PH_INC_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PH_INC_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PH_INC_CAPTURE 0
#define NCO_PHASE_PH_INC_DATA_WIDTH 16
#define NCO_PHASE_PH_INC_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PH_INC_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PH_INC_EDGE_TYPE NONE
#define NCO_PHASE_PH_INC_FREQ 50000000
#define NCO_PHASE_PH_INC_HAS_IN 0
#define NCO_PHASE_PH_INC_HAS_OUT 1
#define NCO_PHASE_PH_INC_HAS_TRI 0
#define NCO_PHASE_PH_INC_IRQ_TYPE NONE
#define NCO_PHASE_PH_INC_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_9', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_9_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_9_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_9_COMPONENT_NAME nco_phase_phase_9
#define NCO_PHASE_PHASE_9_BASE 0x20
#define NCO_PHASE_PHASE_9_SPAN 16
#define NCO_PHASE_PHASE_9_END 0x2f
#define NCO_PHASE_PHASE_9_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_9_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_9_CAPTURE 0
#define NCO_PHASE_PHASE_9_DATA_WIDTH 16
#define NCO_PHASE_PHASE_9_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_9_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_9_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_9_FREQ 50000000
#define NCO_PHASE_PHASE_9_HAS_IN 0
#define NCO_PHASE_PHASE_9_HAS_OUT 1
#define NCO_PHASE_PHASE_9_HAS_TRI 0
#define NCO_PHASE_PHASE_9_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_9_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_8', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_8_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_8_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_8_COMPONENT_NAME nco_phase_phase_8
#define NCO_PHASE_PHASE_8_BASE 0x30
#define NCO_PHASE_PHASE_8_SPAN 16
#define NCO_PHASE_PHASE_8_END 0x3f
#define NCO_PHASE_PHASE_8_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_8_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_8_CAPTURE 0
#define NCO_PHASE_PHASE_8_DATA_WIDTH 16
#define NCO_PHASE_PHASE_8_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_8_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_8_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_8_FREQ 50000000
#define NCO_PHASE_PHASE_8_HAS_IN 0
#define NCO_PHASE_PHASE_8_HAS_OUT 1
#define NCO_PHASE_PHASE_8_HAS_TRI 0
#define NCO_PHASE_PHASE_8_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_8_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_7', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_7_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_7_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_7_COMPONENT_NAME nco_phase_phase_7
#define NCO_PHASE_PHASE_7_BASE 0x40
#define NCO_PHASE_PHASE_7_SPAN 16
#define NCO_PHASE_PHASE_7_END 0x4f
#define NCO_PHASE_PHASE_7_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_7_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_7_CAPTURE 0
#define NCO_PHASE_PHASE_7_DATA_WIDTH 16
#define NCO_PHASE_PHASE_7_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_7_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_7_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_7_FREQ 50000000
#define NCO_PHASE_PHASE_7_HAS_IN 0
#define NCO_PHASE_PHASE_7_HAS_OUT 1
#define NCO_PHASE_PHASE_7_HAS_TRI 0
#define NCO_PHASE_PHASE_7_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_7_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_6', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_6_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_6_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_6_COMPONENT_NAME nco_phase_phase_6
#define NCO_PHASE_PHASE_6_BASE 0x50
#define NCO_PHASE_PHASE_6_SPAN 16
#define NCO_PHASE_PHASE_6_END 0x5f
#define NCO_PHASE_PHASE_6_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_6_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_6_CAPTURE 0
#define NCO_PHASE_PHASE_6_DATA_WIDTH 16
#define NCO_PHASE_PHASE_6_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_6_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_6_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_6_FREQ 50000000
#define NCO_PHASE_PHASE_6_HAS_IN 0
#define NCO_PHASE_PHASE_6_HAS_OUT 1
#define NCO_PHASE_PHASE_6_HAS_TRI 0
#define NCO_PHASE_PHASE_6_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_6_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_5', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_5_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_5_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_5_COMPONENT_NAME nco_phase_phase_5
#define NCO_PHASE_PHASE_5_BASE 0x60
#define NCO_PHASE_PHASE_5_SPAN 16
#define NCO_PHASE_PHASE_5_END 0x6f
#define NCO_PHASE_PHASE_5_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_5_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_5_CAPTURE 0
#define NCO_PHASE_PHASE_5_DATA_WIDTH 16
#define NCO_PHASE_PHASE_5_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_5_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_5_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_5_FREQ 50000000
#define NCO_PHASE_PHASE_5_HAS_IN 0
#define NCO_PHASE_PHASE_5_HAS_OUT 1
#define NCO_PHASE_PHASE_5_HAS_TRI 0
#define NCO_PHASE_PHASE_5_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_5_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_4', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_4_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_4_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_4_COMPONENT_NAME nco_phase_phase_4
#define NCO_PHASE_PHASE_4_BASE 0x70
#define NCO_PHASE_PHASE_4_SPAN 16
#define NCO_PHASE_PHASE_4_END 0x7f
#define NCO_PHASE_PHASE_4_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_4_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_4_CAPTURE 0
#define NCO_PHASE_PHASE_4_DATA_WIDTH 16
#define NCO_PHASE_PHASE_4_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_4_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_4_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_4_FREQ 50000000
#define NCO_PHASE_PHASE_4_HAS_IN 0
#define NCO_PHASE_PHASE_4_HAS_OUT 1
#define NCO_PHASE_PHASE_4_HAS_TRI 0
#define NCO_PHASE_PHASE_4_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_4_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_3', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_3_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_3_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_3_COMPONENT_NAME nco_phase_phase_3
#define NCO_PHASE_PHASE_3_BASE 0x80
#define NCO_PHASE_PHASE_3_SPAN 16
#define NCO_PHASE_PHASE_3_END 0x8f
#define NCO_PHASE_PHASE_3_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_3_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_3_CAPTURE 0
#define NCO_PHASE_PHASE_3_DATA_WIDTH 16
#define NCO_PHASE_PHASE_3_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_3_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_3_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_3_FREQ 50000000
#define NCO_PHASE_PHASE_3_HAS_IN 0
#define NCO_PHASE_PHASE_3_HAS_OUT 1
#define NCO_PHASE_PHASE_3_HAS_TRI 0
#define NCO_PHASE_PHASE_3_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_3_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_2', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_2_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_2_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_2_COMPONENT_NAME nco_phase_phase_2
#define NCO_PHASE_PHASE_2_BASE 0x90
#define NCO_PHASE_PHASE_2_SPAN 16
#define NCO_PHASE_PHASE_2_END 0x9f
#define NCO_PHASE_PHASE_2_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_2_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_2_CAPTURE 0
#define NCO_PHASE_PHASE_2_DATA_WIDTH 16
#define NCO_PHASE_PHASE_2_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_2_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_2_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_2_FREQ 50000000
#define NCO_PHASE_PHASE_2_HAS_IN 0
#define NCO_PHASE_PHASE_2_HAS_OUT 1
#define NCO_PHASE_PHASE_2_HAS_TRI 0
#define NCO_PHASE_PHASE_2_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_2_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_1', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_1_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_1_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_1_COMPONENT_NAME nco_phase_phase_1
#define NCO_PHASE_PHASE_1_BASE 0xa0
#define NCO_PHASE_PHASE_1_SPAN 16
#define NCO_PHASE_PHASE_1_END 0xaf
#define NCO_PHASE_PHASE_1_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_1_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_1_CAPTURE 0
#define NCO_PHASE_PHASE_1_DATA_WIDTH 16
#define NCO_PHASE_PHASE_1_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_1_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_1_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_1_FREQ 50000000
#define NCO_PHASE_PHASE_1_HAS_IN 0
#define NCO_PHASE_PHASE_1_HAS_OUT 1
#define NCO_PHASE_PHASE_1_HAS_TRI 0
#define NCO_PHASE_PHASE_1_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_1_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_14', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_14_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_14_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_14_COMPONENT_NAME nco_phase_phase_14
#define NCO_PHASE_PHASE_14_BASE 0xb0
#define NCO_PHASE_PHASE_14_SPAN 16
#define NCO_PHASE_PHASE_14_END 0xbf
#define NCO_PHASE_PHASE_14_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_14_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_14_CAPTURE 0
#define NCO_PHASE_PHASE_14_DATA_WIDTH 16
#define NCO_PHASE_PHASE_14_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_14_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_14_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_14_FREQ 50000000
#define NCO_PHASE_PHASE_14_HAS_IN 0
#define NCO_PHASE_PHASE_14_HAS_OUT 1
#define NCO_PHASE_PHASE_14_HAS_TRI 0
#define NCO_PHASE_PHASE_14_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_14_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_13', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_13_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_13_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_13_COMPONENT_NAME nco_phase_phase_13
#define NCO_PHASE_PHASE_13_BASE 0xc0
#define NCO_PHASE_PHASE_13_SPAN 16
#define NCO_PHASE_PHASE_13_END 0xcf
#define NCO_PHASE_PHASE_13_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_13_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_13_CAPTURE 0
#define NCO_PHASE_PHASE_13_DATA_WIDTH 16
#define NCO_PHASE_PHASE_13_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_13_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_13_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_13_FREQ 50000000
#define NCO_PHASE_PHASE_13_HAS_IN 0
#define NCO_PHASE_PHASE_13_HAS_OUT 1
#define NCO_PHASE_PHASE_13_HAS_TRI 0
#define NCO_PHASE_PHASE_13_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_13_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_12', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_12_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_12_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_12_COMPONENT_NAME nco_phase_phase_12
#define NCO_PHASE_PHASE_12_BASE 0xd0
#define NCO_PHASE_PHASE_12_SPAN 16
#define NCO_PHASE_PHASE_12_END 0xdf
#define NCO_PHASE_PHASE_12_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_12_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_12_CAPTURE 0
#define NCO_PHASE_PHASE_12_DATA_WIDTH 16
#define NCO_PHASE_PHASE_12_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_12_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_12_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_12_FREQ 50000000
#define NCO_PHASE_PHASE_12_HAS_IN 0
#define NCO_PHASE_PHASE_12_HAS_OUT 1
#define NCO_PHASE_PHASE_12_HAS_TRI 0
#define NCO_PHASE_PHASE_12_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_12_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_11', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_11_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_11_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_11_COMPONENT_NAME nco_phase_phase_11
#define NCO_PHASE_PHASE_11_BASE 0xe0
#define NCO_PHASE_PHASE_11_SPAN 16
#define NCO_PHASE_PHASE_11_END 0xef
#define NCO_PHASE_PHASE_11_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_11_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_11_CAPTURE 0
#define NCO_PHASE_PHASE_11_DATA_WIDTH 16
#define NCO_PHASE_PHASE_11_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_11_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_11_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_11_FREQ 50000000
#define NCO_PHASE_PHASE_11_HAS_IN 0
#define NCO_PHASE_PHASE_11_HAS_OUT 1
#define NCO_PHASE_PHASE_11_HAS_TRI 0
#define NCO_PHASE_PHASE_11_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_11_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_10', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_10_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_10_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_10_COMPONENT_NAME nco_phase_phase_10
#define NCO_PHASE_PHASE_10_BASE 0xf0
#define NCO_PHASE_PHASE_10_SPAN 16
#define NCO_PHASE_PHASE_10_END 0xff
#define NCO_PHASE_PHASE_10_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_10_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_10_CAPTURE 0
#define NCO_PHASE_PHASE_10_DATA_WIDTH 16
#define NCO_PHASE_PHASE_10_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_10_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_10_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_10_FREQ 50000000
#define NCO_PHASE_PHASE_10_HAS_IN 0
#define NCO_PHASE_PHASE_10_HAS_OUT 1
#define NCO_PHASE_PHASE_10_HAS_TRI 0
#define NCO_PHASE_PHASE_10_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_10_RESET_VALUE 0

/*
 * Macros for device 'nco_phase_phase_0', class 'altera_avalon_pio'
 * The macros are prefixed with 'NCO_PHASE_PHASE_0_'.
 * The prefix is the slave descriptor.
 */
#define NCO_PHASE_PHASE_0_COMPONENT_TYPE altera_avalon_pio
#define NCO_PHASE_PHASE_0_COMPONENT_NAME nco_phase_phase_0
#define NCO_PHASE_PHASE_0_BASE 0x100
#define NCO_PHASE_PHASE_0_SPAN 16
#define NCO_PHASE_PHASE_0_END 0x10f
#define NCO_PHASE_PHASE_0_BIT_CLEARING_EDGE_REGISTER 0
#define NCO_PHASE_PHASE_0_BIT_MODIFYING_OUTPUT_REGISTER 0
#define NCO_PHASE_PHASE_0_CAPTURE 0
#define NCO_PHASE_PHASE_0_DATA_WIDTH 16
#define NCO_PHASE_PHASE_0_DO_TEST_BENCH_WIRING 0
#define NCO_PHASE_PHASE_0_DRIVEN_SIM_VALUE 0
#define NCO_PHASE_PHASE_0_EDGE_TYPE NONE
#define NCO_PHASE_PHASE_0_FREQ 50000000
#define NCO_PHASE_PHASE_0_HAS_IN 0
#define NCO_PHASE_PHASE_0_HAS_OUT 1
#define NCO_PHASE_PHASE_0_HAS_TRI 0
#define NCO_PHASE_PHASE_0_IRQ_TYPE NONE
#define NCO_PHASE_PHASE_0_RESET_VALUE 0

/*
 * Macros for device 'general_cnt_in', class 'altera_avalon_pio'
 * The macros are prefixed with 'GENERAL_CNT_IN_'.
 * The prefix is the slave descriptor.
 */
#define GENERAL_CNT_IN_COMPONENT_TYPE altera_avalon_pio
#define GENERAL_CNT_IN_COMPONENT_NAME general_cnt_in
#define GENERAL_CNT_IN_BASE 0x1e0
#define GENERAL_CNT_IN_SPAN 16
#define GENERAL_CNT_IN_END 0x1ef
#define GENERAL_CNT_IN_BIT_CLEARING_EDGE_REGISTER 0
#define GENERAL_CNT_IN_BIT_MODIFYING_OUTPUT_REGISTER 0
#define GENERAL_CNT_IN_CAPTURE 0
#define GENERAL_CNT_IN_DATA_WIDTH 32
#define GENERAL_CNT_IN_DO_TEST_BENCH_WIRING 0
#define GENERAL_CNT_IN_DRIVEN_SIM_VALUE 0
#define GENERAL_CNT_IN_EDGE_TYPE NONE
#define GENERAL_CNT_IN_FREQ 50000000
#define GENERAL_CNT_IN_HAS_IN 1
#define GENERAL_CNT_IN_HAS_OUT 0
#define GENERAL_CNT_IN_HAS_TRI 0
#define GENERAL_CNT_IN_IRQ_TYPE NONE
#define GENERAL_CNT_IN_RESET_VALUE 0

/*
 * Macros for device 'general_cnt_out', class 'altera_avalon_pio'
 * The macros are prefixed with 'GENERAL_CNT_OUT_'.
 * The prefix is the slave descriptor.
 */
#define GENERAL_CNT_OUT_COMPONENT_TYPE altera_avalon_pio
#define GENERAL_CNT_OUT_COMPONENT_NAME general_cnt_out
#define GENERAL_CNT_OUT_BASE 0x1f0
#define GENERAL_CNT_OUT_SPAN 16
#define GENERAL_CNT_OUT_END 0x1ff
#define GENERAL_CNT_OUT_BIT_CLEARING_EDGE_REGISTER 0
#define GENERAL_CNT_OUT_BIT_MODIFYING_OUTPUT_REGISTER 0
#define GENERAL_CNT_OUT_CAPTURE 0
#define GENERAL_CNT_OUT_DATA_WIDTH 32
#define GENERAL_CNT_OUT_DO_TEST_BENCH_WIRING 0
#define GENERAL_CNT_OUT_DRIVEN_SIM_VALUE 0
#define GENERAL_CNT_OUT_EDGE_TYPE NONE
#define GENERAL_CNT_OUT_FREQ 50000000
#define GENERAL_CNT_OUT_HAS_IN 0
#define GENERAL_CNT_OUT_HAS_OUT 1
#define GENERAL_CNT_OUT_HAS_TRI 0
#define GENERAL_CNT_OUT_IRQ_TYPE NONE
#define GENERAL_CNT_OUT_RESET_VALUE 0

/*
 * Macros for device 'tx_AUX', class 'bstream_new'
 * The macros are prefixed with 'TX_AUX_'.
 * The prefix is the slave descriptor.
 */
#define TX_AUX_COMPONENT_TYPE bstream_new
#define TX_AUX_COMPONENT_NAME tx_AUX
#define TX_AUX_BASE 0x200
#define TX_AUX_SPAN 512
#define TX_AUX_END 0x3ff

/*
 * Macros for device 'tx_DUMP', class 'bstream_new'
 * The macros are prefixed with 'TX_DUMP_'.
 * The prefix is the slave descriptor.
 */
#define TX_DUMP_COMPONENT_TYPE bstream_new
#define TX_DUMP_COMPONENT_NAME tx_DUMP
#define TX_DUMP_BASE 0x3000
#define TX_DUMP_SPAN 512
#define TX_DUMP_END 0x31ff

/*
 * Macros for device 'tx_DAMP', class 'bstream_new'
 * The macros are prefixed with 'TX_DAMP_'.
 * The prefix is the slave descriptor.
 */
#define TX_DAMP_COMPONENT_TYPE bstream_new
#define TX_DAMP_COMPONENT_NAME tx_DAMP
#define TX_DAMP_BASE 0x4000
#define TX_DAMP_SPAN 512
#define TX_DAMP_END 0x41ff

/*
 * Macros for device 'tx_CHRG', class 'bstream_new'
 * The macros are prefixed with 'TX_CHRG_'.
 * The prefix is the slave descriptor.
 */
#define TX_CHRG_COMPONENT_TYPE bstream_new
#define TX_CHRG_COMPONENT_NAME tx_CHRG
#define TX_CHRG_BASE 0x5000
#define TX_CHRG_SPAN 512
#define TX_CHRG_END 0x51ff

/*
 * Macros for device 'tx_L2', class 'bstream_new'
 * The macros are prefixed with 'TX_L2_'.
 * The prefix is the slave descriptor.
 */
#define TX_L2_COMPONENT_TYPE bstream_new
#define TX_L2_COMPONENT_NAME tx_L2
#define TX_L2_BASE 0x6000
#define TX_L2_SPAN 512
#define TX_L2_END 0x61ff

/*
 * Macros for device 'tx_L1', class 'bstream_new'
 * The macros are prefixed with 'TX_L1_'.
 * The prefix is the slave descriptor.
 */
#define TX_L1_COMPONENT_TYPE bstream_new
#define TX_L1_COMPONENT_NAME tx_L1
#define TX_L1_BASE 0x7000
#define TX_L1_SPAN 512
#define TX_L1_END 0x71ff

/*
 * Macros for device 'tx_H2', class 'bstream_new'
 * The macros are prefixed with 'TX_H2_'.
 * The prefix is the slave descriptor.
 */
#define TX_H2_COMPONENT_TYPE bstream_new
#define TX_H2_COMPONENT_NAME tx_H2
#define TX_H2_BASE 0x8000
#define TX_H2_SPAN 512
#define TX_H2_END 0x81ff


#endif /* _ALTERA_HPS_SOC_SYSTEM_H_ */
